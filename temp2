import nmap
import json
import os
import csv
import sys
import socket
import netifaces
from time import sleep

# Function to load the local vulnerability database from a JSON file
def load_vulnerability_database():
    try:
        with open("vulnerability.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        print("Error: vulnerability.json file not found.")
        sys.exit(1)

# Function to get the local network range based on the current interface
def get_local_network():
    try:
        # Get default network interface
        interfaces = netifaces.interfaces()
        default_interface = netifaces.gateways()['default'][netifaces.AF_INET][1]  # get default interface
        ip_info = netifaces.ifaddresses(default_interface)
        
        # Find the local IP and subnet mask
        local_ip = ip_info[netifaces.AF_INET][0]['addr']
        subnet_mask = ip_info[netifaces.AF_INET][0]['netmask']
        
        # Calculate the network address
        network_address = ".".join(local_ip.split(".")[:3]) + ".0/24"
        print(f"Detected local network: {network_address}")
        return network_address
    except Exception as e:
        print(f"Error obtaining local network: {e}")
        sys.exit(1)

# Function to scan local networks using nmap
def scan_networks(network_range):
    nm = nmap.PortScanner()
    print(f"Scanning network range {network_range}...")
    nm.scan(hosts=network_range, arguments='-sn')  # Scan for all hosts in the range
    active_hosts = []
    for host in nm.all_hosts():
        if nm[host].state() == "up":
            active_hosts.append(host)
    if not active_hosts:
        print("No active devices found on the local network.")
        sys.exit(1)
    return active_hosts

# Function to identify EOL devices by checking OS version
def identify_EOL_devices(active_hosts, vulnerability_db):
    eol_devices = {}
    for host in active_hosts:
        try:
            nm = nmap.PortScanner()
            nm.scan(hosts=host, arguments='-O')  # Scan for OS information
            if "osclass" in nm[host]:
                os_info = nm[host]["osclass"]
                for os in os_info:
                    os_name = os.get("osfamily", "").strip()
                    if os_name in vulnerability_db:
                        eol_devices[host] = os_name
                        break
        except Exception as e:
            print(f"Error scanning {host}: {e}")
    if not eol_devices:
        print("No EOL devices identified.")
        sys.exit(1)
    return eol_devices

# Function to check for vulnerabilities in the identified EOL devices
def check_vulnerabilities(eol_devices, vulnerability_db):
    vulnerabilities_found = {}
    for host, os in eol_devices.items():
        vulnerabilities_found[host] = {}
        for cve, details in vulnerability_db[os].items():
            vulnerabilities_found[host][cve] = details
    return vulnerabilities_found

# Function to scan for open ports and services on EOL devices
def scan_ports_and_services(eol_devices):
    port_scan_results = {}
    for host in eol_devices:
        try:
            nm = nmap.PortScanner()
            nm.scan(hosts=host, arguments='-p 1-65535')
            port_scan_results[host] = nm[host].all_tcp()
        except Exception as e:
            print(f"Error scanning ports for {host}: {e}")
    return port_scan_results

# Function to generate the CSV and text report
def generate_reports(vulnerabilities_found, port_scan_results, eol_devices):
    # CSV Report
    with open('eol_devices_report.csv', mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["IP Address", "OS", "Vulnerability CVE", "Description", "CVSS v3 Score", "Open Ports"])
        for host, os in eol_devices.items():
            for cve, details in vulnerabilities_found.get(host, {}).items():
                cvss_v3 = details.get("cvss_v3", {}).get("base_score", "N/A")
                description = details.get("description", "No description available")
                open_ports = ", ".join(map(str, port_scan_results.get(host, [])))
                writer.writerow([host, os, cve, description, cvss_v3, open_ports])

    # Text Report
    with open('eol_devices_report.txt', mode='w') as file:
        for host, os in eol_devices.items():
            file.write(f"Device IP: {host}\n")
            file.write(f"Operating System: {os}\n")
            for cve, details in vulnerabilities_found.get(host, {}).items():
                description = details.get("description", "No description available")
                cvss_v3 = details.get("cvss_v3", {}).get("base_score", "N/A")
                file.write(f"  Vulnerability CVE: {cve}\n")
                file.write(f"    Description: {description}\n")
                file.write(f"    CVSS v3 Score: {cvss_v3}\n")
            open_ports = ", ".join(map(str, port_scan_results.get(host, [])))
            file.write(f"  Open Ports: {open_ports}\n")
            file.write("\n")
    print("Reports generated: eol_devices_report.csv and eol_devices_report.txt")

# Main function
def main():
    # Load vulnerability database
    vulnerability_db = load_vulnerability_database()

    # Get the local network range dynamically
    local_network = get_local_network()

    # Scan for active networks
    active_hosts = scan_networks(local_network)
    print(f"Available active networks: {', '.join(active_hosts)}")
    selected_network = input("Enter the IP address of the network you want to scan: ").strip()

    if selected_network not in active_hosts:
        print("Error: The selected network is not available.")
        sys.exit(1)

    # Identify EOL devices
    eol_devices = identify_EOL_devices([selected_network], vulnerability_db)
    print(f"Identified EOL devices: {', '.join(eol_devices.keys())}")

    # Check vulnerabilities for the identified EOL devices
    vulnerabilities_found = check_vulnerabilities(eol_devices, vulnerability_db)

    # Scan open ports and services on EOL devices
    port_scan_results = scan_ports_and_services(eol_devices)

    # Generate and save reports
    generate_reports(vulnerabilities_found, port_scan_results, eol_devices)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nProcess interrupted. Exiting...")
        sys.exit(1)
